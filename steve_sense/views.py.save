import datetime
from datetime import timezone
from django.http.response import JsonResponse
from django.shortcuts import render, HttpResponse, redirect
from django.core import serializers
from .parameter_form import Environmental_Settings_Form
from .attached_devices_form import Attached_Devices_Form
from .attached_sensors_form import Attached_Sensors_Form
from .models import Sensor_Logs, Environmental_Settings, Attached_Devices, Attached_Sensors, Space, Device_Events
from .steve_mon import Steve_Relay_Adapter

import json


# Create your views here.

def json_data(data):
    df = data.to_dataframe()
    crispJSONPayload = df.to_json(orient = 'records',date_format='iso')
    crispJSONPayload = json.loads(crispJSONPayload)
    return crispJSONPayload

def json_data_aggregator(data,interval):
    df = data.to_timeseries(index='time',storage='wide')
    resampledData_df = df.resample(interval).mean().round(2)
    resampledData_df = resampledData_df.interpolate('time')
    resampledData_df = resampledData_df.reset_index()
    crispJSONPayload = resampledData_df.to_json(orient ='records',date_format='iso')
    crispJSONPayload = json.loads(crispJSONPayload)
    return crispJSONPayload


def single_record(data):
    df = data.to_dataframe()
    crispJSONPayload = df.to_json(orient = 'records',date_format='iso')
    crispJSONPayload = json.loads(crispJSONPayload)
    return crispJSONPayload
    
def last_12_hours(request):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=24)
    Sensor_Logs_Objects = Sensor_Logs.objects.filter(time__gt=time_frame).order_by('-time')
    crispJSONPayload = json_data(Sensor_Logs_Objects)
    return JsonResponse(crispJSONPayload, safe=False) # No need to aggregate under like 24 hours - it takes long to calculate

def last_24_hours(sensor):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=48)
    q1 = Sensor_Logs.objects.filter(time__gt=time_frame).order_by('-time')
    Sensor_Logs_Objects = Sensor_Logs.objects.filter(time__gt=time_frame).order_by('-time')
    crispJSONPayload = json_data_aggregator(Sensor_Logs_Objects,'1T')
    return JsonResponse(crispJSONPayload, safe=False) # No need to aggregate under like 24 hours - it takes long to calculate

def last_48_hours(request):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=48)
    Sensor_Logs_Objects = Sensor_Logs.objects.filter(time__gt=time_frame).order_by('-time')
    crispJSONPayload = json_data_aggregator(Sensor_Logs_Objects,'5T')
    return JsonResponse(crispJSONPayload, safe=False) # No need to aggregate under like 24 hours - it takes long to calculate

def attached_devices(request,space_name):
    attached_devices = Attached_Devices.objects.filter(space_id=space_name)
    crispJSONPayload = serializers.serialize('json', attached_devices)
    return HttpResponse(crispJSONPayload, content_type='application/json')

def environmental_settings(request,space_name):
    environmental_settings = Environmental_Settings.objects.filter(space_id=space_name)
    crispJSONPayload = serializers.serialize('json', environmental_settings)
    return HttpResponse(crispJSONPayload, content_type='application/json')

def device_monitor_status(request):
    f = open('/home/pi/steve/SteveMon/Extractor_module_log.log')
    file_content = f.read()
    f.close()
    return HttpResponse(file_content, content_type="text/plain")

def device_events2(request,space_name,tdelta):
    payload = []
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=tdelta)
    attached_devices = Attached_Devices.objects.filter(space_id=space_name)
    for device in attached_devices:
        device_events = Device_Events.objects.filter(device_id=device.id).filter(time__gt=time_frame).order_by('-time') 
        if len(device_events) == 0:
            device_events = Device_Events.objects.filter(device_id=device.id).order_by('-time')[:1]
            if len(device_events) > 0:
                device_events = serializers.serialize('json', device_events) 
                device_events = json.loads(device_events) 
                device_events[0]['fields']['time'] = time_frame.isoformat() #make time = chart_min time
                device_events.append({'fields':{'time':datetime.datetime.now().isoformat(),'device_state':device_events[0]['fields']['device_state']}})
            else:
                device_events = 'NONE'
            
        else:
            device_events = serializers.serialize('json', device_events)
            device_events = json.loads(device_events)
        payload.append({device.device_type:device_events})   
    return JsonResponse(payload,safe=False)

def device_events(request,space_name,tdelta):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=tdelta)
    device_events = Device_Events.objects.filter(device_id__space=space_name).filter(time__gt=time_frame).order_by('-time')
    attached_devices = Attached_Devices.objects.filter(space_id=space_name)
    attached_devices = serializers.serialize('json', attached_devices)
    crispJSONPayload = serializers.serialize('json', device_events) 
    devices = json.loads(attached_devices)
    events = json.loads(crispJSONPayload)
    for event in events:
        for device in devices:
            if event['fields']['device_id'] == device['pk']:
                event['fields'][device['fields']['device_type']] = event['fields']['device_state']    
                #del event['fields']['device_state']          
    return JsonResponse(events,safe=False)


def logs(request,space_name,tdelta):
    if tdelta == 0:
        time_frame = datetime.datetime.now() - datetime.timedelta(minutes=10)
        space_logs = Sensor_Logs.objects.filter(sensor__space=space_name)
        time_filtered_space_logs = space_logs.filter(time__gt=time_frame)
        attached_sensors = Attached_Sensors.objects.filter(space=space_name)
        combinedCrispPayload = []
        for i in attached_sensors:
            specific_sensor_logs = time_filtered_space_logs.filter(sensor__id=i.id).order_by('-time')[:1]
            crispJSONPayload = single_record(specific_sensor_logs)
        return JsonResponse(crispJSONPayload, safe=False) # No need to aggregate under like 24 hours - it takes long to calculate
    else:
        if tdelta <= 3:
            tscale = '1T'
        elif tdelta <= 6:
            tscale = '2T'
        elif tdelta <= 12:
            tscale = '4T'
        elif tdelta <= 25:
            tscale = '8T'
        elif tdelta <= 48:
            tscale = '16T'
        elif tdelta <= 72:
            tscale = '24T'
        elif tdelta <= 120:
            tscale = '40T'
        elif tdelta <= 168:
            tscale = '56T'
        else:
            tscale = '60T'
        time_frame = datetime.datetime.now() - datetime.timedelta(minutes=tdelta)
        space_logs = Sensor_Logs.objects.filter(sensor__space=space_name)
        time_filtered_space_logs = space_logs.filter(time__gt=time_frame)
        attached_sensors = Attached_Sensors.objects.filter(space=space_name)
        combinedCrispPayload = []
        for i in attached_sensors:
            specific_sensor_logs = time_filtered_space_logs.filter(sensor__id=i.id).order_by('-time')
            crispJSONPayload = json_data_aggregator(specific_sensor_logs, tscale)
            combinedCrispPayload.append({i.sensor_model:crispJSONPayload})
        return JsonResponse(combinedCrispPayload, safe=False) # No need to aggregate under like 24 hours - it takes long to calculate


def latest_samples(request):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=1) 
    Sensor_Logs_Objects = Sensor_Logs.objects.filter(time__gt=time_frame).order_by('-time')[:1]
    crispJSONPayload = single_record(Sensor_Logs_Objects)
    return JsonResponse(crispJSONPayload, safe=False)


def space_parameters(request):
    Environmental_Settings_Objects = Environmental_Settings.objects.filter()[:1]
    crispJSONPayload = serializers.serialize('json', Environmental_Settings_Objects)
    return JsonResponse(json.loads(crispJSONPayload), safe=False)

    
def space_parameters_form(request, space_name):
    attached_devices = Attached_Devices.objects.all()
    #attached_devices_form = Attached_Devices_Form()

    attached_sensors = Attached_Sensors.objects.all()
    #attached_devices_form = Attached_Devices_Form()
    if len(Environmental_Settings.objects.all()) > 0:
        space_instance = Environmental_Settings.objects.get(space=space_name)
        environmental_settings_form = Environmental_Settings_Form(instance=space_instance)
    else:
        environmental_settings_form = Environmental_Settings_Form()
    if request.method == 'POST':
        environmental_settings_form = Environmental_Settings_Form(request.POST,instance=space_instance)
        if environmental_settings_form.is_valid():
            environmental_settings_form.save()
            return redirect('/space_parameters_form/'+space_name)
        else:
            return redirect('/')
    context = {
        'attached_devices': attached_devices,
        'attached_sensors': attached_sensors,
        'environmental_settings_form': environmental_settings_form,
        'space': space_name,
        #'form': attached_devices_form.as_p,
    }
    return render(request, "steve_sense/parameters.html", context)


def add_device_form(request, space_name):
    attached_devices_form = Attached_Devices_Form()
    if request.method == 'POST':
        attached_devices_form = Attached_Devices_Form(request.POST)
        if attached_devices_form.is_valid():
            attached_devices_form.save()
            return redirect('/space_parameters_form/'+space_name)
        else:
            return redirect(str(attached_devices_form.errors)) # TODO < FIX THIS ABORTION
    context = {
        'attached_devices_form': attached_devices_form,
        'space': space_name,
    }
    return render(request, "steve_sense/new_device.html", context)

def add_sensor_form(request, space_name):
    attached_sensors_form = Attached_Sensors_Form()
    if request.method == 'POST':
        attached_sensors_form = Attached_Sensors_Form(request.POST)
        if attached_sensors_form.is_valid():
            attached_sensors_form.save()
            return redirect('/space_parameters_form/'+space_name)
        else:
            return redirect(str(attached_sensors_form.errors)) # TODO < FIX THIS ABORTION
    context = {
        'attached_sensors_form': attached_sensors_form,
        'space': space_name,
    }
    return render(request, "steve_sense/new_sensor.html", context)


def update_device_form(request, pk):
    device_instance = Attached_Devices.objects.get(id=pk)
    attached_devices_form = Attached_Devices_Form(instance=device_instance)
    if request.method == 'POST':
        attached_devices_form = Attached_Devices_Form(request.POST, instance=device_instance)
        if attached_devices_form.is_valid():
            attached_devices_form.save()
            return redirect('/space_parameters_form/'+str(device_instance.space.space_name))
    else:
        attached_devices_form = Attached_Devices_Form(instance=device_instance)

    context = {
        'attached_devices_form': attached_devices_form,
        'device_instance': device_instance,
    }
    return render(request, "steve_sense/update_device.html", context)

def update_sensor_form(request, pk):
    sensor_instance = Attached_Sensors.objects.get(id=pk)
    attached_sensors_form = Attached_Sensors_Form(instance=sensor_instance)
    if request.method == 'POST':
        attached_sensors_form = Attached_Sensors_Form(request.POST, instance=sensor_instance)
        if attached_sensors_form.is_valid():
            attached_sensors_form.save()
            return redirect('/space_parameters_form/'+str(sensor_instance.space.space_name))
        else:
            return redirect(str(attached_sensors_form.errors)) # TODO < FIX THIS ABORTION
    context = {
        'attached_sensors_form': attached_sensors_form,
        'sensor_instance': sensor_instance,
    }
    return render(request, "steve_sense/update_sensor.html", context)


def delete_device_form(request, pk):
    device_instance = Attached_Devices.objects.get(id=pk)
    if request.method == 'POST':
        device_instance.delete()
        return redirect('/space_parameters_form/'+str(device_instance.space.space_name))
    context = {
        'device_instance': device_instance
    }
    return render(request, "steve_sense/delete_device.html", context)

def delete_sensor_form(request, pk):
    sensor_instance = Attached_Sensors.objects.get(id=pk)
    if request.method == 'POST':
        sensor_instance.delete()
        return redirect('/space_parameters_form/'+str(sensor_instance.space.space_name))
    context = {
        'sensor_instance': sensor_instance
    }
    return render(request, "steve_sense/delete_sensor.html", context)



def events(request, device_id,tdelta):
    time_frame = datetime.datetime.now() - datetime.timedelta(hours=int(tdelta))
    attached_devices = Device_Events.objects.filter(device_id__id=device_id)
    time_filtered_attached_devices = attached_devices.filter(time__gt=time_frame).order_by('time')
    if len(time_filtered_attached_devices) > 0:
        events = list(time_filtered_attached_devices.values())
        return JsonResponse(events, safe=False) 
    elif len(time_filtered_attached_devices) == 0:
        time_filtered_attached_devices = attached_devices.filter().order_by('time')[:1]
        events = list(time_filtered_attached_devices.values())
        return JsonResponse(events, safe=False) 

def device_control(request, channel):
    attached_device = Attached_Devices.objects.get(device_relay_channel=int(channel))
    attached_device_id = attached_device.id
    if Steve_Relay_Adapter.status(int(channel)) == True:
        Steve_Relay_Adapter.off(int(channel))
        status = False
        event_1 = Device_Events.objects.create(device_id_id=attached_device_id, time=datetime.datetime.now(), device_state = True)
        event_1.save()
        event_2 = Device_Events.objects.create(device_id_id=attached_device_id, time=datetime.datetime.now(), device_state = status)
        event_2.save()
        status_update = Attached_Devices.objects.update(device_id_id=attached_device_id,device_status=status)
        status_update.save()
    else:
        Steve_Relay_Adapter.on(int(channel))
        status = True
        event_1 = Device_Events.objects.create(device_id_id=attached_device_id, time=datetime.datetime.now(), device_state = False)
        event_1.save()
        event_2 = Device_Events.objects.create(device_id_id=attached_device_id, time=datetime.datetime.now(), device_state = status)
        event_2.save()
        status_update = Attached_Devices.objects.update(device_id_id=attached_device_id,device_status=status)
        status_update.save()
    
    return JsonResponse({'status':status})


def dashboard(request, space_name):
    attached_devices = Attached_Devices.objects.filter(space__space_name=space_name)
    attached_sensors = Attached_Sensors.objects.filter(space__space_name=space_name)
    device_status = {}
    device_last_on = {}
    device_status = {}
    device_last_duration = {}
    # for i in attached_devices:
    #     status = Steve_Relay_Adapter.status(i.device_relay_channel)
    #     last_on = Device_Events.objects.filter(device_id=i.id).filter(
    #         device_state=True).order_by('-time')[:2]
    #     duration_seconds = (last_on[0].time - last_on[1].time).total_seconds()
    #     h = duration_seconds//3600
    #     m = (duration_seconds % 3600) // 60
    #     duration_hhmm = "%d:%d" % (h, m)

    #     device_status[i.device_type] = status
    #     device_last_on[i.device_type] = last_on[1].time
    #     device_last_duration[i.device_type] = duration_hhmm
    context = {
        'space': space_name,
        'attached_devices': attached_devices,
        'attached_sensors': attached_sensors,
        'device_status': device_status,
        'device_last_on': device_last_on,
        'device_last_duration': device_last_duration,
    }
    return render(request, "steve_sense/dashboard.html", context)


def welcome(request):
    spaces = Space.objects.all()
    context = {
        'spaces': spaces,
    }
    return render(request, "steve_sense/welcome.html", context)

    
def steve(request):
    return render(request, "steve_sense/STEVE.html", {})

def parameters(request):
    return render(request, "steve_sense/parameters.html", {})
    
def index(request):
    return render(request, "steve_sense/overview.html", {})

def halfDay(request):
    return render(request, "steve_sense/dailys.html", {})

def fullDay(request):
    return render(request, "steve_sense/dailys1.html", {})

def live(request):
    return render(request, "steve_sense/live.html", {})
